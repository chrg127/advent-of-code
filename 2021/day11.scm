(define (char->num c) (- (char->integer c) (char->integer #\0)))
(define (map-index f l [i 0])
  (if (null? l) '() (cons (f (car l) i) (map-index f (cdr l) (add1 i)))))
(define (map-ij f l)
  (map-index (lambda (x i) (map-index (lambda (y j) (f y i j)) x)) l))

(define (parse name)
  (define tab (make-hash))
  (map-ij (lambda (x i j) (hash-set! tab (list i j) (char->num x)))
          (map string->list (file->lines name)))
  tab)

(define (hash-update-all! h f) (hash-for-each h (lambda (k v) (hash-update! h k f))))
(define (hash-filter h pred)
  (filter-map (lambda (x) (if (pred (cdr x)) (car x) #f)) (hash->list h)))

(define (flash-loop tab)
  (define memo (make-hash))
  (define (adjacents i j)
    (remove (list i j) (cartesian-product (range (sub1 i) (+ i 2)) (range (sub1 j) (+ j 2)))))
  (define (loop tab)
    (let* ([flashing (hash-filter tab (lambda (x) (> x 9)))]
           [adjs (filter (lambda (p) (hash-has-key? tab p))
                         (apply append (map (lambda (p) (adjacents (car p) (cadr p))) flashing)))])
      (if (null? flashing)
        'done
        (begin (for-each (lambda (x) (begin (hash-set! tab x 0)
                                            (hash-set! memo x #t))) flashing)
               (for-each (lambda (x)
                           (if (not (hash-has-key? memo x))
                             (hash-update! tab x add1)
                             'noupdate)) adjs)
               (loop tab)))))
  (loop tab))

(define (step-loop tab pred res-fn)
  (define (step tab i)
    (if (not (pred tab i))
      (begin (hash-update-all! tab add1)
             (flash-loop tab)
             (res-fn tab)
             (step tab (add1 i)))
      i))
  (step tab 0))

(define (sol1 name)
  (define res 0)
  (step-loop (parse name)
             (lambda (h x) (= x 100))
             (lambda (h) (set! res (+ res (count (lambda (x) (= x 0)) (hash-values h))))))
  (displayln res))

(define (sol2 name)
  (define res (step-loop (parse name)
                         (lambda (h x) (andmap (lambda (x) (= x 0)) (hash-values h)))
                         (lambda (h) 'nothing)))
  (displayln res))

(sol1 "input11-1.txt")
(sol1 "input11-2.txt")
(sol2 "input11-1.txt")
(sol2 "input11-2.txt")
