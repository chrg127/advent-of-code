(define (parse name)
  (map (lambda (line)
         (let ((splitted (string-split line " -> ")))
           (map string->number (append (string-split (car  splitted) ",")
                                       (string-split (cadr splitted) ",")))))
       (port->lines (open-input-file name))))

(define (build-mat dim v) (build-vector dim (lambda (i) (make-vector dim v))))
(define (mat-ref mat i j) (vector-ref (vector-ref mat i) j))
(define (mat-set! mat i j v) (vector-set! (vector-ref mat i) j v))
(define (mat-count f mat)
  (foldl + 0 (vector->list (vector-map (lambda (v) (vector-count f v)) mat))))

(define (zip . lst) (apply map list lst))
(define (max-list lst) (apply max lst))

(define (mat-set-range mat col-range row-range f)
  (for-each (lambda (pair)
              (let ((row (first pair)) (col (second pair)))
                (mat-set! mat row col (f (mat-ref mat row col)))))
            (zip row-range col-range)))

(define (get-ranges nums)
  (define (get-step a b) (if (> a b) -1 1))
  (let ((a (first nums)) (b (second nums)) (c (third nums)) (d (fourth nums)))
    (let ((minx (min a c)) (maxx (max a c)) (miny (min b d)) (maxy (max b d)))
      (cond ((= minx maxx) (list (make-list (- (add1 maxy) miny) minx) (inclusive-range miny maxy)))
            ((= miny maxy) (list (inclusive-range minx maxx) (make-list (- (add1 maxx) minx) miny)))
            (else          (list (inclusive-range a c (get-step a c)) (inclusive-range b d (get-step b d))))))))

(define (not-diagonal? nums)
  (or (= (first nums) (third nums))
      (= (second nums) (fourth nums))))

(define (sol1 name)
  (define vents (filter not-diagonal? (parse name)))
  (define ranges (map get-ranges vents))
  (define dim (add1 (max-list (map max-list vents))))
  (define diagram (build-mat dim 0))
  (for-each (lambda (range-rc)
            (mat-set-range diagram (first range-rc) (second range-rc) add1))
          ranges)
  (displayln (mat-count (lambda (x) (>= x 2)) diagram)))

(define (sol2 name)
  (define vents (parse name))
  (define ranges (map get-ranges vents))
  (define dim (add1 (max-list (map max-list vents))))
  (define diagram (build-mat dim 0))
  (for-each (lambda (range-rc)
            (mat-set-range diagram (first range-rc) (second range-rc) add1))
          ranges)
  (displayln (mat-count (lambda (x) (>= x 2)) diagram)))

(sol1 "input5-1.txt")
(sol1 "input5-2.txt")
(sol2 "input5-1.txt")
(sol2 "input5-2.txt")
