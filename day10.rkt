(define (parse input)
  (map (lambda (s) (if (string=? s "noop")
                     (list 'nop 0)
                     (list 'add (string->number (substring s 5))))) input))

(define ((nop n) x c f) (begin (f x c) (list x (+ c 1))))
(define ((add n) x c f) (begin (f x c) (f x (+ c 1)) (list (+ x n) (+ c 2))))
(define (exec instr x c f)
  (((hash-ref (hash 'nop nop 'add add) (car instr)) (cadr instr)) x c f))
(define (instr-loop instrs f)
  (foldl (lambda (i s) (exec i (car s) (cadr s) f)) (list 1 1) instrs))

(define (part1 input)
  (let ([sum 0])
    (instr-loop input (lambda (x c)
                        (if (= (modulo (- c 20) 40) 0)
                          (set! sum (+ sum (* x c)))
                          (void))))
    (println sum)))

(define input1 (parse (file->lines "input10-1.txt")))
(define input2 (parse (file->lines "input10-2.txt")))
(define input3 (parse (file->lines "input10-3.txt")))
(part1 input1)
(part1 input2)
(part1 input3)
;(part2 input1)
;(part2 input2)
;(part2 input3)
