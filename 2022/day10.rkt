(define (parse input)
  (map (lambda (s) (if (string=? s "noop")
                     (list 'nop 0)
                     (list 'add (string->number (substring s 5))))) input))

(define (nop n x c f) (begin (f x c) (list x (+ c 1))))
(define (add n x c f) (begin (f x c) (f x (+ c 1)) (list (+ x n) (+ c 2))))
(define (instr-loop instrs f)
  (foldl (lambda (i s) (apply (if (eq? (car i) 'nop) nop add)
                              (append (cdr i) s (list f)))) (list 1 1) instrs))
(define (between x a b) (and (<= x b) (>= x a)))

(define (part1 input)
  (let ([sum 0])
    (instr-loop input (lambda (x c) (set! sum (if (= (modulo (- c 20) 40) 0)
                                                (+ sum (* x c))
                                                sum))))
    (println sum)))

(define (part2 input)
  (instr-loop input (lambda (x c)
                      (let* ([crt-col (modulo (sub1 c) 40)])
                        (printf "~a" (if (between crt-col (- x 1) (+ x 1))
                                       #\# #\.))
                        (if (= crt-col 39) (printf "\n") (void)))))
  (printf "\n\n"))

(time (begin (define input1 (parse (file->lines "input10-1.txt")))
             (define input2 (parse (file->lines "input10-2.txt")))
             (define input3 (parse (file->lines "input10-3.txt")))
             (part1 input1)
             (part1 input2)
             (part1 input3)
             (part2 input1)
             (part2 input2)
             (part2 input3)))
