(define (parse input)
  (map (lambda (l)
         (map (lambda (p)
                (map string->number (string-split p "-")))
              (string-split l ",")))
         input))

(define (covers? a b c d) (or (and (>= c a) (<= d b)) (and (>= a c) (<= b d))))
(define (between? a b x) (and (>= x a) (<= x b)))
(define (overlaps? a b c d) (or (between? a b c) (between? a b d)
                                (between? c d a) (between? c d b)))

(define (find-assignments input pred)
  (println (apply + (map (lambda (p)
                           (if (pred (caar p) (cadar p) (caadr p) (cadadr p)) 1 0))
                         input))))

(define (part1 input) (find-assignments input covers?))
(define (part2 input) (find-assignments input overlaps?))

(time (begin (define input1 (parse (file->lines "input4-1.txt")))
             (define input2 (parse (file->lines "input4-2.txt")))
             (part1 input1)
             (part1 input2)
             (part2 input1)
             (part2 input2)))
