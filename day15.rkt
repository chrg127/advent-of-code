(define (ints s) (map string->number (regexp-match* "[-?0-9]+" s)))
(define (parse input)
  (map (compose (lambda (x) (list (take x 2) (drop x 2))) ints) input))

(define (array- . args) (apply (curry map -) args))
(define (array-abs . args) (apply (curry map abs) args))
(define (manhattan x y) (apply + (array-abs (array- x y))))
(define (between x a b) (and (<= x b) (>= x a)))
(define (inv-manhattan x1 y1 y2 r)
  (if (not (between y2 (- y1 r) (+ y1 r)))
    '()
    (list (max (+ (- r)    y1  (- y2) x1)
               (+ (- r) (- y1)    y2  x1))
          (min (+    r     y1  (- y2) x1)
               (+    r  (- y1)    y2  x1)))))
(define (find-xs sensor beacon y)
  (inv-manhattan (car sensor) (cadr sensor) y (manhattan sensor beacon)))

(define (part1 input y)
  (let* ([r (apply append (map (lambda (p) (find-xs (car p) (cadr p) y)) input))])
    (println (- (apply max r) (apply min r)))))

(define input1 (parse (file->lines "input15-1.txt")))
(define input2 (parse (file->lines "input15-2.txt")))
(part1 input1 10)
(part1 input2 2000000)
